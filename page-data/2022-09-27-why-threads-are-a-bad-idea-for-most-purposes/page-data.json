{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/2022-09-27-why-threads-are-a-bad-idea-for-most-purposes","result":{"data":{"post":{"__typename":"MdxPost","slug":"/2022-09-27-why-threads-are-a-bad-idea-for-most-purposes","title":"Why Threads Are A Bad Idea (for most purposes) — Paper Summary","date":"27.09.2022","tags":[{"name":"summary","slug":"summary"},{"name":"paper","slug":"paper"},{"name":"concurrency","slug":"concurrency"}],"description":null,"canonicalUrl":"https://elvischidera.com/2022-09-27-why-threads-are-a-bad-idea-for-most-purposes/","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Why Threads Are A Bad Idea (for most purposes) — Paper Summary\",\n  \"slug\": \"/2022-09-27-why-threads-are-a-bad-idea-for-most-purposes\",\n  \"date\": \"2022-09-27T00:00:00.000Z\",\n  \"canonicalUrl\": \"https://elvischidera.com/2022-09-27-why-threads-are-a-bad-idea-for-most-purposes/\",\n  \"banner\": \"./assets/banner.jpg\",\n  \"tags\": [\"summary\", \"paper\", \"concurrency\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today's summary is about a  \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf\"\n  }), \"paper\"), \" written by John Ousterhout in 1995. This is technically not a paper, but a presentation given by the author at a Usenix conference.\"), mdx(\"hr\", null), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Threads are independent execution streams that shared state (memory) and are often preemptively scheduled by the OS/runtime.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Threads are too hard for most programmers because:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Synchronization\"), \": access to shared data must be coordinated with locks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Deadlock\"), \": Circular dependencies among locks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Hard to debug\"), \": data dependencies, timing dependencies.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Threads break abstraction\"), \": can't design modules independently.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Callbacks don't work with locks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Locks trade-off\"), \": Coarse-grain locking yields low concurrency; Fine-grain locking increases complexity and locking overhead.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"OSes limit performance\"), \": scheduling, context switches.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Event-driven programming:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One execution stream: no CPU concurrency.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Register interest in events (callbacks).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Event loop waits for events and invokes handlers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No preemption of event handlers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Handlers are generally short-lived.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Events are used in most GUIs:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One handler for each event (press button, invoke menu entry, etc.).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Handler implements behavior (undo, delete a file, etc.).\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Problems with events:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Long-running handlers make the application non-responsive.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can't maintain local state across events (handler must return).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No CPU concurrency.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Event-driven I/O not always well supported (e.g. poor write buffering).\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Events vs Threads:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Events avoid concurrency as much as possible, threads embrace.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debugging is easier with events.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Events are faster than threads on a single CPU because of no context switching or locking overhead.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Threads provide true concurrency.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The conclusion is to avoid threads wherever possible:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use events, not threads, for GUIs, distributed systems, low-end servers, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only use threads where true CPU concurrency is needed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Where threads are needed, isolate usage in threaded application kernel: keep most of the code single-threaded.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Today's summary is about a   paper  written by John Ousterhout in 1995. This is technically not a paper, but a presentation given by the…","timeToRead":1,"banner":{"childImageSharp":{"resize":{"src":"/static/03bf2a7f515d88de32088320b65e64e5/a6c62/banner.jpg"}}}}},"pageContext":{"slug":"/2022-09-27-why-threads-are-a-bad-idea-for-most-purposes","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}