{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/2022-10-26-dont-thrash-how-to-cache-your-hash-on-flash","result":{"data":{"post":{"__typename":"MdxPost","slug":"/2022-10-26-dont-thrash-how-to-cache-your-hash-on-flash","title":"Don’t Thrash: How to Cache your Hash on Flash — Paper Summary","date":"26.10.2022","tags":[{"name":"summary","slug":"summary"},{"name":"paper","slug":"paper"}],"description":null,"canonicalUrl":"https://elvischidera.com/2022-10-26-dont-thrash-how-to-cache-your-hash-on-flash/","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Don’t Thrash: How to Cache your Hash on Flash — Paper Summary\",\n  \"slug\": \"/2022-10-26-dont-thrash-how-to-cache-your-hash-on-flash\",\n  \"date\": \"2022-10-26T00:00:00.000Z\",\n  \"canonicalUrl\": \"https://elvischidera.com/2022-10-26-dont-thrash-how-to-cache-your-hash-on-flash/\",\n  \"banner\": \"./assets/banner.jpeg\",\n  \"tags\": [\"summary\", \"paper\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Authors:  Michael A. Bender, Martin Farach-Colton, Rob Johnson, Russell Kraner, Bradley C. Kuszmaul, Dzejla Medjedovic, Pablo Montes, Pradeep Shetty, Richard P. Spillane, Erez Zadok\"), mdx(\"p\", null, \"Date: 2012\"), mdx(\"p\", null, \"Link: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://supertech.csail.mit.edu/papers/BenderFaJo12.pdf\"\n  }), \"PDF\")), mdx(\"hr\", null), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"This paper describes the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Cascade Filter\"), \", an \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"approximate-membership-query\"), \" (AMQ) data structure that scales beyond main memory, supporting over half a million insertions/deletions per second and over 500 lookups per second on a commodity flash-based SSD.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An AMQ data structure is a dictionary that trades off space for a false positive rate on membership queries.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The Bloom filter is a well-known example of an AMQ; but it doesn\\u2019t scale beyond main memory.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An AMQ data structure supports the following dictionary operations on a set of keys:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Insert\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lookup\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally delete.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For a key in the set, lookup returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"present\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For a key not in the set, lookup returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"absent\"), \" with probability at least \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1 \\u2212 \\u03B5\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u03B5\"), \" is a tunable false-positive rate. There is a tradeoff between \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u03B5\"), \" and space consumption.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bloom filters require about one byte per stored data item.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"quotient Filter\"), \" (QF) is an in-memory AMQ data structure that is functionally similar to a Bloom filter, but lookups incur a single cache miss, as opposed to at least two in expectation for a Bloom filter.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Cascade Filter\"), \" (CF) comprises a collection of QFs organized into a data structure inspired by the Cache-Oblivious Lookahead Array (COLA).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A rotational disk performs only \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"100\\u2013200\"), \" (random) I/Os per second.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The Cascade Filter supports insertions at rates 40 times faster than a Bloom filter with buffering and 3,200 times faster than a traditional Bloom filter. Lookup throughput is 3 times slower than that of a Bloom filter or about the cost of 6 times random reads on flash.\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Authors:  Michael A. Bender, Martin Farach-Colton, Rob Johnson, Russell Kraner, Bradley C. Kuszmaul, Dzejla Medjedovic, Pablo Montes…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/2022-10-26-dont-thrash-how-to-cache-your-hash-on-flash","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}