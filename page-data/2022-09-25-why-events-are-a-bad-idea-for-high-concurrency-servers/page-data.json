{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/2022-09-25-why-events-are-a-bad-idea-for-high-concurrency-servers","result":{"data":{"post":{"__typename":"MdxPost","slug":"/2022-09-25-why-events-are-a-bad-idea-for-high-concurrency-servers","title":"Why Events Are A Bad Idea (for high-concurrency servers) — Paper Summary","date":"25.09.2022","tags":[{"name":"summary","slug":"summary"},{"name":"paper","slug":"paper"},{"name":"concurrency","slug":"concurrency"}],"description":null,"canonicalUrl":"https://elvischidera.com/2022-09-25-why-events-are-a-bad-idea-for-high-concurrency-servers/","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Why Events Are A Bad Idea (for high-concurrency servers) — Paper Summary\",\n  \"slug\": \"/2022-09-25-why-events-are-a-bad-idea-for-high-concurrency-servers\",\n  \"date\": \"2022-09-25T00:00:00.000Z\",\n  \"canonicalUrl\": \"https://elvischidera.com/2022-09-25-why-events-are-a-bad-idea-for-high-concurrency-servers/\",\n  \"banner\": \"./assets/banner.jpg\",\n  \"tags\": [\"summary\", \"paper\", \"concurrency\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today's summary is about a  \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.usenix.org/legacy/events/hotos03/tech/full_papers/vonbehren/vonbehren.pdf\"\n  }), \"paper\"), \" written in 2003 by Rob von Behren, Jeremy Condit and Eric Brewer.\"), mdx(\"hr\", null), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The four primary arguments for the supremacy of events:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inexpensive synchronization due to cooperative multitasking.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lower overhead for managing state (no stacks).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Better scheduling and locality, based on application-level information.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More flexible control flow (not just call/return).\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lauer and Needham \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://dl.acm.org/doi/10.1145/850657.850658\"\n  }), \"showed\"), \" in 1978 that message-passing (i.e: event) systems and process-based systems are duals, both in terms of program structure and performance characteristics.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u201CProblems\\u201D with threads:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Performance criticism\"), \" \\u2014 Many attempts to use threads for high concurrency have not performed well.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The authors argue that this is an artifact of poor thread implementations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A major source of overhead is the presence of operations that are O(n) in the number of threads. Another common problem with thread packages is their relatively high context switch overhead when compared with events. This overhead is due to both preemption, which requires saving registers and other states during context switches, and additional kernel crossings (in the case of kernel threads).\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Control-flow criticism\"), \" \\u2014 Threads have restrictive control flow.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The authors argue that complicated control-flow patterns are rare in practice. Common control-flow patterns are simple: call/return, parallel calls, and pipelines.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The only patterns we considered that are less graceful with threads are dynamic fan-in and fan-out; such patterns might occur with multicast or publish/subscribe applications. In these cases, events are probably more natural.\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Synchronization criticism\"), \" \\u2014 Thread synchronization mechanisms are too heavyweight.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The authors argue that cooperative thread systems can also get synchronization for \\u201Cfree\\u201D \\u2014 i.e: cooperative multitasking instead of preemptive scheduling.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"State Management criticism\"), \" \\u2014 Thread stacks are an ineffective way to manage live-state.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Threaded systems typically face a tradeoff between potential stack overflow and wasted space because of fixed-size stacks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Event systems avoid this problem because they typically use a few threads and unwind the thread stack after each event handler.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The authors argue this problem can be solved with dynamic stack growth.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Scheduling criticism\"), \" \\u2014 The virtual processor model provided by threads forces the runtime system to be too generic and prevents it from making optimal scheduling decisions.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Event systems are capable of scheduling event deliveries at the application level. This allows for various optimizations: allowing better code locality by running several of the same kind of event in a row; performing shortest remaining completion time scheduling; etc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The authors argue that Lauer-Needham duality indicates that the same scheduling tricks can be applied to cooperatively scheduled threads.\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The case for threads:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Control Flow\"), \" \\u2014For high-concurrency systems, event-based programming tends to obfuscate the control flow of the application.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Exception Handling and State Lifetime\"), \" \\u2014 Cleaning up task state after exceptions and after normal termination is simpler in a threaded system since the thread stack naturally tracks the live state for that task.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Runtime dispatch\"), \": Event systems require various forms of runtime dispatch, since the next event handler to execute is not known statically. This problem is related to the problem of ambiguous control flow, which affects performance by reducing opportunities for compiler optimizations and by increasing CPU pipeline stalls.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trying to fix these event issues effectively duplicates the syntax and run-time behavior of threads.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How compilers can support threads:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Dynamic Stack Growth\"), \" \\u2014 Determining upper bounds for dynamic stack growth.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Live State Management\"), \" \\u2014 Compilers can purge unnecessary states from the stack before making function calls.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Synchronization\"), \" \\u2014 Compile-time analysis can reduce the occurrence of bugs by warning the programmer about data races.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The authors ran a test to show that a well-designed thread package can achieve the same scaling behavior as a well-designed event system.\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Today's summary is about a   paper  written in 2003 by Rob von Behren, Jeremy Condit and Eric Brewer. The four primary arguments for the…","timeToRead":2,"banner":{"childImageSharp":{"resize":{"src":"/static/03bf2a7f515d88de32088320b65e64e5/a6c62/banner.jpg"}}}}},"pageContext":{"slug":"/2022-09-25-why-events-are-a-bad-idea-for-high-concurrency-servers","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}