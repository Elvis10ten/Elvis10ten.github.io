{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/2017-09-30-the-beauty-of-the-modulo-operator/","result":{"data":{"post":{"__typename":"MdxPost","slug":"/2017-09-30-the-beauty-of-the-modulo-operator/","title":"The Beauty of the Modulo Operator","date":"30.09.2017","tags":[{"name":"math","slug":"math"}],"description":null,"canonicalUrl":"https://elvischidera.com/2017-09-30-the-beauty-of-the-modulo-operator/","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The Beauty of the Modulo Operator\",\n  \"date\": \"2017-09-30T00:00:00.000Z\",\n  \"slug\": \"/2017-09-30-the-beauty-of-the-modulo-operator/\",\n  \"canonicalUrl\": \"https://elvischidera.com/2017-09-30-the-beauty-of-the-modulo-operator/\",\n  \"tags\": [\"math\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I think one of the least used arithmetic operator in most programming languages is the modulo operator which is used to find the remainder when a number is divided by another number. The usual symbol for the modulo operator is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"%\"), \". ****Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int i = 1 % 5; // i is equal to one\\n\")), mdx(\"p\", null, \"One common use case for this operator is to check if a number is even or odd. Which is quite straight forward, if you get a remainder when dividing by 2 its an odd number, else its even. But lets do something more interesting with this operator. Lets try the operator with a bunch of numbers like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"0 % 2 = 0\\n1 % 2 = 1\\n2 % 2 = 0\\n3 % 2 = 1\\n4 % 2 = 0\\n5 % 2 = 1\\n\")), mdx(\"p\", null, \"Did you notice the pattern?, the result of the modulo operator can never be greater than the divisor (the second operand). It will always be one lesser than the second operand. The reason this happens is because division is all about fair sharing. For example, if you are sharing 7 apples fairly with 2 boys, they will each get 3 apples with 1 remaining. The number of apples left can not be greater than 2.\"), mdx(\"p\", null, \"What can i do with this?, well i will leave that up to you. But one cool thing you can do is to use the modulo operator to set a boundary for a number, rather than using an if then else statement. Example: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int i = num % 181\"), \" , the integer variable i will always have a value in the range 0 <= i < 181, that is from 0\\u2013180.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I think one of the least used arithmetic operator in most programming languages is the modulo operator which is used to find the remainderâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/2017-09-30-the-beauty-of-the-modulo-operator/","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}